name: Go

on: [push]

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: ${{ github.repository }}

jobs:

  lint:
    runs-on: arc-runner-set
    steps:
    - name: checkout source code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: Install golint
      run: go install golang.org/x/lint/golint

    - name: Lint
      id: lint
      run: make lint

  test:
    runs-on: ubuntu-latest
    steps:
    - name: checkout source code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: Test
      run: make test

  
  build-and-push-image:
    if: github.event_name == 'push'
    needs: ["lint", "test"]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: checkout source code
        uses: actions/checkout@v4
      # - name: Set env
      #   run: |
      #     echo "AWS_ACCESS_KEY_ID=${{ secrets.RUNNER_ACCESS_KEY_ID }}" >> $GITHUB_ENV \
      #       && echo "AWS_SECRET_ACCESS_KEY=${{ secrets.RUNNER_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      - name: Test
        run: echo $GITHUB_SHA_SHORT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YANDEX_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha, event=branch
            type=ref, event=tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          provenance: false
          push: false
          pull: true
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          # Cache to yandex container registry
          cache-from: type=registry,ref=${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,mode=max,ref=${{ secrets.YANDEX_REGISTRY }}/${{ env.IMAGE_NAME }}:cache,oci-mediatypes=true,image-manifest=true
          # Cache to yandex s3 storage
          # cache-from: type=s3,region=${{ vars.RUNNER_REGION }},bucket=${{ vars.RUNNER_BUCKET_NAME }},endpoint_url=${{ vars.RUNNER_ENDPOINT }}
          # cache-to: type=s3,mode=max,region=${{ vars.RUNNER_REGION }},bucket=${{ vars.RUNNER_BUCKET_NAME }},endpoint_url=${{ vars.RUNNER_ENDPOINT }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}, 
  

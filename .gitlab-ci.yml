stages:
    - lint
    - test
    - build

lint:
  image: golang:alpine
  stage: lint
  before_script:
    - apk add --no-cache make
    - go install golang.org/x/lint/golint
  script:
    - make lint

test:
  image: golang:alpine
  stage: test
  before_script:
    - apk add --no-cache make
  script:
    - make test

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

build-push:
  services:
    - docker:dind
  stage: build
  image: docker:latest
  needs:
    - lint
    - test
  rules:
    - if: $CI_COMMIT_TAG == null  
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:7} --tag $CI_REGISTRY_IMAGE:latest .
    # - docker build -t $CI_REGISTRY/singeol/ci-golang-demo:${CI_COMMIT_SHA:0:7} .
    # - docker push $CI_REGISTRY/singeol/ci-golang-demo:${CI_COMMIT_SHA:0:7}
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:7}
    - docker push $CI_REGISTRY_IMAGE:latest

build-tag:
  services:
    - docker:dind
  stage: build
  image: docker:latest
  needs:
    - lint
    - test
  rules:
    - if: $CI_COMMIT_TAG  
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --tag $CI_REGISTRY_IMAGE:latest .
    # - docker build -t $CI_REGISTRY/singeol/ci-golang-demo:$CI_COMMIT_TAG .
    # - docker push "$CI_REGISTRY_IMAGE/singeol/ci-golang-demo:$CI_COMMIT_TAG"
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
